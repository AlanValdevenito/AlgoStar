@startuml

Usuario -> Zerling: Zerling()
Zerling --> Usuario: unZerling

Usuario -> Zealot: Zealot()
Zealot --> Usuario: unZealot

Usuario -> Zerling: atacarA(unZealot)

Zerling -> Ataque: atacarA(unZealot)
note left: Cada unidad tiene como atributo su ataque.\nZerling implementa Atacante y entiende el mensaje.\n\nataque.atacarA(unZealot)
Ataque -> Zealot: obtenerSuperficie()
note left: Le pedimos a Zealot su superficie\n(es una unidad de tipo Tierra) para\nverificar que sea una combinacion valida.
Zealot --> Ataque: Tierra

Ataque -> Tierra: compararCon(Tierra)
note left: El ataque tiene como atributo el tipo superficie que sabe atacar.\n\ntipo.compararCon(Tierra)
note right: Caso de uso 19: Comparamos el tipo de superficie de Zealot (Tierra) y el tipo de ataque que tiene Zerling (Tierra).\n\nComo son compatibles, devuelve true y se procede a atacar.
Tierra --> Ataque: true

Ataque -> Zealot: recibirAtaque(4)
note left: Zealot implementa Atacable y entiende el mensaje.
Zealot -> Escudo: recibirAtaquePor(4)

Escudo --> Zealot
Zealot --> Ataque
Ataque --> Zerling
Zerling --> Usuario

Usuario -> Zealot: obtenerEscudo()
note right: Caso de uso 18: Verificar que todas las unidades causen el daÃ±o que\ndicen que causan en sus ataques.
Zealot -> Escudo: proteccion()
Escudo --> Zealot: escudoRestante
Zealot --> Usuario: escudoRestante

@enduml

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

@startuml

Usuario -> Hidralisco: Hidralisco()
Hidralisco --> Usuario: unHidralisco

Usuario -> Zealot: Zealot()
Zealot --> Usuario: unZealot

Usuario -> Hidralisco: atacarA(unZealot)

loop Para cada ataque de la unidad

Hidralisco -> AtaqueAire: atacarA(unZealot)
AtaqueAire -> Zealot: obtenerSuperficie()
Zealot --> AtaqueAire: Tierra

AtaqueAire -> Aire: compararCon(Tierra)
Aire --> AtaqueAire: false

AtaqueAire --> Hidralisco: false

Hidralisco -> AtaqueTierra: atacarA(unZealot)
AtaqueTierra -> Zealot: obtenerSuperficie()
Zealot --> AtaqueTierra: Tierra

AtaqueTierra -> Tierra: compararCon(Tierra)
Tierra --> AtaqueTierra: true

AtaqueTierra -> Zealot: recibirAtaque(4)
note left: A partir de aqui sigue toda la logica de recibir ataques.

end

@enduml