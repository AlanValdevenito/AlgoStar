"Volcan"

@startuml

class GasVespeno{
    -cantidad: int
}

class Volcan{
	-refineria: RefineriaDeGas
	-cantidadDeGasVespenoDisponible: int
	+Volcan(unaCantidadDeGasVespeno)
	+construirRefineriaDeGas(unaRefineria)
	+extraerGasUsandoRefineria(cantidadGasParaExtraer)
	+extraerGas(cantidadDeGasParaExtraer)
}

interface RefineriaDeGas{
	+extraerGasUsandoRefineria(unVolcan): int
	+construirEn(unVolcan)
	+obtenerGas(): int
}

class Extractor{
	-cantidadExtraible: int
	-cantidadExtraida: int
	-cantidadMaximaDeZanganos: int
	-volcan: Volcan
	-zanganos: ArrayList<Zangano>
	-estado: EstadoOperativo
	+Extractor()
	+avanzarTurno()
	+ejecutarOperable()
	+ejecutarEnConstruccion()
	+guardarZangano(unZangano)
	+extraerGasUsandoRefineria(unVolcan): int
	+construirEn(unVolcan)
	+obtenerGas(): int
}

note left: El metodo avanzarTurno() delega segun el\nestado de la forma estado.ejecutar().\n\nEsto es analogo para Asimilador.

interface EstadoOperativo{
    -edificio: Edificio
    +ejecutar()
}

class Operable{
    +Operable(unEdificio)
    +ejecutar()
}

note left: Extractor delega en su estado y luego el estado\ndelega en criadero mediante el metodo ejecutar()\nde la forma edificio.ejecutarOperable().\n\nEsto es analogo para Asimilador.

class EnConstruccion{
    +EnConstruccion(unEdificio)
    +ejecutar()
}

note right: Extractor delega en su estado y luego el estado\ndelega encriadero mediante el metodo ejecutar()\nde la forma edificio.ejecutarEnConstruccion().\n\nEsto es analogo para Asimilador.

class Asimilador{
    -cantidadExtraible: int
    -cantidadExtraida: int
    -volcan: Volcan
    -estado: EstadoOperativo
    +Asimilador()
    +avanzarTurno()
    +ejecutarOperable()
    +ejecutarEnConstruccion()
    +extraerGasUsandoRefineria(unVolcan): int
    +construirEn(unVolcan)
    +obtenerGas(): int
}

Operable ..up|> EstadoOperativo
EnConstruccion ..up|> EstadoOperativo

Extractor --> EstadoOperativo

Asimilador --> EstadoOperativo

RefineriaDeGas <|.. Extractor
RefineriaDeGas <|.. Asimilador

Volcan --> GasVespeno
Volcan <--> RefineriaDeGas

@enduml

"Supongamos que queremos construir un Extractor.
El Volcan recibira en su constructor una instancia
de la clase Extractor con un estado operativo inicial
de ExtractorNoUtilizable.
Entonces el Volcan se guardara como atributo al Extractor."

"Supongamos que queremos recolectar Gas utilizando un Extractor.
Le enviamos un mensaje a Volcan diciendole que queremos extraer
gas. El Volcan le delega al Extractor la responsabilidad
de calcular la cantidad de gas a extraer.
Extractor recorre su lista de Zanganos y suma
Extractor le pide la cantidad de gas al Volcan y este
le devuelve la cantidad que tiene disponible.
Luego el Volcan devuelve la cantidad extraida de gas."