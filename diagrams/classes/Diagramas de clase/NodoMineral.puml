@startuml

class Mineral{
    -cantidad: int
}

class NodoMineral{
	-minero: Minero
	-cantidadDeMineralDisponible: int
	+NodoMineral(unaCantidadDeMineral)
	+construirRecolectorDeMineral(unMinero)
	+recolectarMineralUsandoRecolectorDeMineral(cantidadDeMineralParaExtraer): int
	+recolectarMineral(cantidadDeMineralParaExtraer): int
}

interface Minero{
	+recolectarMineralUsandoRecolectorDeMineral(unNodoMineral): int
	+construirEn(unNodoMineral)
	+obtenerMineral(): int
}

class NexoMineral{
	-estado: EstadoOperativo
	-cantidadRecolectable: int
	-cantidadRecolectada: int
	-nodo: NodoMineral
	+NexoMineral()
	+avanzarTurno()
	+ejecutarEnConstruccion()
	+ejecutarOperable()
	+recolectarMineralUsandoRecolectorDeMineral(unNodoMineral)
	+construirEn(unNodo)
	+obtenerMineral()
}

note left: El metodo avanzarTurno() delega segun el\nestado de la forma estado.ejecutar().

interface EstadoOperativo{
    -edificio: Edificio
    +ejecutar()
}

class Operable{
    +Operable(unEdificio)
    +ejecutar()
}

note left: NexoMineral delega en su estado y luego el estado\ndelega en NexoMineral mediante el metodo ejecutar()\nde la forma edificio.ejecutarOperable().

class EnConstruccion{
    +EnConstruccion(unEdificio)
    +ejecutar()
}

note right: NexoMineral delega en su estado y luego el estado\ndelega en NexoMineral mediante el metodo ejecutar()\nde la forma edificio.ejecutarEnConstruccion().

class Zangano{
    -cantidadRecolectableDeMineral: int
    -cantidadRecolectada: int
    -nodo: NodoMineral
    +Zangano(unaCantidadRecolectable)
    +avanzarTurno()
    +recolectarMineralUsandoRecolectorDeMineral(unNodoMineral)
    +construirEn(unNodoMineral)
    +obtenerMineral()
}

NexoMineral --> EstadoOperativo

EstadoOperativo <|.. Operable
EstadoOperativo <|.. EnConstruccion

Minero <|.. NexoMineral
Minero <|.. Zangano

NodoMineral --> Mineral
NodoMineral --> Minero

@enduml